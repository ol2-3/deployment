import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–¥–∞—Ç–∫–∞
st.title("ü©∫ –®—Ç—É—á–Ω–∏–π –Ü–Ω—Ç–µ–ª–µ–∫—Ç –¥–ª—è –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ü–Ω—Ñ–∞—Ä–∫—Ç—É")
st.markdown("""
–¶–µ–π –¥–æ–¥–∞—Ç–æ–∫ –¥–æ–ø–æ–º–∞–≥–∞—î –æ—Ü—ñ–Ω–∏—Ç–∏ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —ñ–Ω—Ñ–∞—Ä–∫—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö —Å–∏–º–ø—Ç–æ–º—ñ–≤.
**–£–≤–∞–≥–∞**: –¶–µ –Ω–µ –∑–∞–º—ñ–Ω—è—î –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –ª—ñ–∫–∞—Ä—è!
""")

# 1. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö (—Ç–µ–ø–µ—Ä –∑ —Ç–∏—Å–∫–æ–º —ñ –ø—É–ª—å—Å–æ–º)
@st.cache_data
def load_data():
    data = {
        'age': [55, 60, 45, 70, 50, 65, 40, 75, 62, 48, 30, 85],
        'chest_pain': [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1],
        'pain_arm': [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1],
        'shortness_breath': [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1],
        'sweating': [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1],
        'nausea': [1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1],
        'systolic_bp': [180, 120, 130, 200, 110, 160, 115, 190, 170, 125, 140, 210],  # –í–µ—Ä—Ö–Ω—ñ–π —Ç–∏—Å–∫
        'diastolic_bp': [110, 80, 85, 120, 70, 90, 75, 100, 95, 80, 90, 130],      # –ù–∏–∂–Ω—ñ–π —Ç–∏—Å–∫
        'pulse': [90, 72, 80, 110, 65, 95, 70, 105, 85, 75, 88, 115],              # –ü—É–ª—å—Å
        'heart_attack': [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1]
    }
    return pd.DataFrame(data)

df = load_data()

# 2. –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
X = df.drop('heart_attack', axis=1)
y = df['heart_attack']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# 3. –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
st.sidebar.header("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ —Å–∏–º–ø—Ç–æ–º–∏:")

# –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
age = st.sidebar.slider("–í—ñ–∫", 15, 105, 50)
chest_pain = st.sidebar.radio("–ë—ñ–ª—å —É –≥—Ä—É–¥—è—Ö", ["–ù–µ–º–∞—î", "–¢–∞–∫"], index=0)
pain_arm = st.sidebar.radio("–ë—ñ–ª—å –≤—ñ–¥–¥–∞—î –≤ –ª—ñ–≤—É —Ä—É–∫—É/—â–µ–ª–µ–ø—É", ["–ù–µ–º–∞—î", "–¢–∞–∫"], index=0)
breath = st.sidebar.radio("–ó–∞–¥–∏—à–∫–∞", ["–ù–µ–º–∞—î", "–¢–∞–∫"], index=0)
sweating = st.sidebar.radio("–ü—ñ—Ç–ª–∏–≤—ñ—Å—Ç—å/—Ö–æ–ª–æ–¥–Ω–∏–π –ø—ñ—Ç", ["–ù–µ–º–∞—î", "–¢–∞–∫"], index=0)
nausea = st.sidebar.radio("–ù—É–¥–æ—Ç–∞/–±–ª—é–≤–∞–Ω–Ω—è", ["–ù–µ–º–∞—î", "–¢–∞–∫"], index=0)

# –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –ø–æ–ª—è (–∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø—Ä–æ–ø—É—Å–∫—É)
st.sidebar.markdown("---")
st.sidebar.subheader("–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)")

bp_col1, bp_col2 = st.sidebar.columns(2)
with bp_col1:
    systolic = st.number_input("–í–µ—Ä—Ö–Ω—ñ–π —Ç–∏—Å–∫ (–º–º —Ä—Ç.—Å—Ç.)", min_value=50, max_value=250, value=120, step=1)
with bp_col2:
    diastolic = st.number_input("–ù–∏–∂–Ω—ñ–π —Ç–∏—Å–∫ (–º–º —Ä—Ç.—Å—Ç.)", min_value=30, max_value=150, value=80, step=1)

pulse = st.sidebar.number_input("–ü—É–ª—å—Å (—É–¥/—Ö–≤)", min_value=30, max_value=200, value=72, step=1)

use_bp_pulse = st.sidebar.checkbox("–í—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ —Ç–∏—Å–∫ —ñ –ø—É–ª—å—Å —É –∞–Ω–∞–ª—ñ–∑—ñ", value=False)

# 4. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
input_data = {
    'age': age,
    'chest_pain': 1 if chest_pain == "–¢–∞–∫" else 0,
    'pain_arm': 1 if pain_arm == "–¢–∞–∫" else 0,
    'shortness_breath': 1 if breath == "–¢–∞–∫" else 0,
    'sweating': 1 if sweating == "–¢–∞–∫" else 0,
    'nausea': 1 if nausea == "–¢–∞–∫" else 0,
    'systolic_bp': systolic if use_bp_pulse else df['systolic_bp'].median(),
    'diastolic_bp': diastolic if use_bp_pulse else df['diastolic_bp'].median(),
    'pulse': pulse if use_bp_pulse else df['pulse'].median()
}

input_df = pd.DataFrame([input_data])

# 5. –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
probability = model.predict_proba(input_df)[0][1] * 100

# 6. –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü—ñ–Ω–∫–∏:")
if probability >= 50:
    st.error(f"üî¥ **–í–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫ —ñ–Ω—Ñ–∞—Ä–∫—Ç—É!** –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: {probability:.1f}%")
    st.markdown("""
    **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**  
    ‚Ä¢ –ù–µ–≥–∞–π–Ω–æ –≤–∏–∫–ª–∏—á—Ç–µ —à–≤–∏–¥–∫—É (103 –∞–±–æ 112)  
    ‚Ä¢ –ü—Ä–∏–π–º—ñ—Ç—å 250-325 –º–≥ –∞—Å–ø—ñ—Ä–∏–Ω—É (—Ä–æ–∑–∂—É–≤–∞—Ç–∏)  
    ‚Ä¢ –õ—è–∂—Ç–µ, —É–Ω–∏–∫–∞–π—Ç–µ —Ä—É—Ö—ñ–≤  
    """)
    
    if use_bp_pulse:
        if systolic > 140 or diastolic > 90:
            st.warning("‚ö† –í–∞—à —Ç–∏—Å–∫ –ø—ñ–¥–≤–∏—â–µ–Ω–∏–π! –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Å–ø–æ–∫–æ—ó—Ç–∏—Å—è.")
        if pulse > 100:
            st.warning("‚ö† –í–∞—à –ø—É–ª—å—Å –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–∏–π! –î–∏—Ö–∞–π—Ç–µ –ø–æ–≤—ñ–ª—å–Ω–æ —Ç–∞ –≥–ª–∏–±–æ–∫–æ.")
else:
    st.success(f"üü¢ **–ù–∏–∑—å–∫–∏–π —Ä–∏–∑–∏–∫ —ñ–Ω—Ñ–∞—Ä–∫—Ç—É.** –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: {probability:.1f}%")
    st.markdown("""
    **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**  
    ‚Ä¢ –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—Ç–∏ –∑–∞ —Å—Ç–∞–Ω–æ–º  
    ‚Ä¢ –Ø–∫—â–æ —Å–∏–º–ø—Ç–æ–º–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è >20 —Ö–≤ ‚Äì –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è  
    """)

# 7. –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
st.markdown("---")
st.subheader("üìä –Ü–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
col1, col2 = st.columns(2)
with col1:
    st.markdown("**–¢–∏—Å–∫:**")
    st.write("- –ù–æ—Ä–º–∞: <120/80 –º–º —Ä—Ç.—Å—Ç.")
    st.write("- –ì—ñ–ø–µ—Ä—Ç–æ–Ω—ñ—è: ‚â•140/90 –º–º —Ä—Ç.—Å—Ç.")
with col2:
    st.markdown("**–ü—É–ª—å—Å:**")
    st.write("- –ù–æ—Ä–º–∞: 60-100 —É–¥/—Ö–≤")
    st.write("- –¢–∞—Ö—ñ–∫–∞—Ä–¥—ñ—è: >100 —É–¥/—Ö–≤")

st.markdown("---")
st.subheader("‚Ñπ –í–∞–∂–ª–∏–≤–æ –∑–Ω–∞—Ç–∏")
st.write("""
‚Ä¢ 30% —ñ–Ω—Ñ–∞—Ä–∫—Ç—ñ–≤ –ø—Ä–æ—Ö–æ–¥—è—Ç—å –±–µ–∑ –∫–ª–∞—Å–∏—á–Ω–æ–≥–æ –±–æ–ª—é –≤ –≥—Ä—É–¥—è—Ö  
‚Ä¢ –ñ—ñ–Ω–∫–∏ —á–∞—Å—Ç—ñ—à–µ –≤—ñ–¥—á—É–≤–∞—é—Ç—å –Ω—É–¥–æ—Ç—É/–±—ñ–ª—å —É —Å–ø–∏–Ω—ñ –∑–∞–º—ñ—Å—Ç—å –≥—Ä—É–¥–Ω–æ–≥–æ –±–æ–ª—é  
‚Ä¢ –ü—Ä–∏ –¥—ñ–∞–±–µ—Ç—ñ —Å–∏–º–ø—Ç–æ–º–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –º–µ–Ω—à –≤–∏—Ä–∞–∂–µ–Ω–∏–º–∏  
""")